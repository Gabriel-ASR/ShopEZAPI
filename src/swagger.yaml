openapi: 3.0.0

info:
  title: ShopEZ API
  description: Uma API de uma loja fictícia de produtos para a disciplina de Backend.
  version: 1.0.0

paths:
  /produtos:
    get:
      summary: Retorna uma lista com todos os produtos presentes no banco de dados.
      tags:
        - Produtos
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          content:
            application:/json:
              schema:
                $ref: "#/components/schemas/Message"
    post:
      summary: Adiciona um novo produto no banco de dados.
      tags:
        - Produtos
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        422:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

  /produtos/{id}:
    get:
      summary: Retorna o produto identificado pelo Id inserido.
      tags:
        - Produtos
      parameters:
        - in: path
          type: string
          name: id
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    put:
      summary: Atualiza os dados de um produto.
      tags:
        - Produtos
      parameters:
        - in: path
          type: string
          name: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          content:
            applcation/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        422:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []
    delete:
      summary: Deleta o produto especificado pelo Id.
      tags:
        - Produtos
      parameters:
        - in: path
          type: string
          name: id
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

  /usuarios/{id}/produtos:
    get:
      summary: Retorna uma lista de produtos criados pelo usuário especificado pelo Id.
      tags:
        - Produtos
      parameters:
        - in: path
          type: string
          name: id
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

  /usuarios:
    get:
      summary: Retorna uma lista de todos os usuários presentes no banco de dados.
      tags:
        - Usuários
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

  /usuarios/{id}:
    get:
      summary: Retorna o usuário especificado pelo Id.
      tags:
        - Usuários
      parameters:
        - in: path
          type: string
          name: id
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    put:
      summary: Atualiza os dados de um usuário.
      tags:
        - Usuários
      parameters:
        - in: path
          type: string
          name: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schema:
                $ref: "$/components/schemas/Message"
        422:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []
    delete:
      summary: Deleta o usuário especificado pelo Id.
      tags:
        - Usuários
      parameters:
        - in: path
          type: string
          name: id
      responses:
        200:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/User"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

  /carrinhos:
    get:
      summary: Retorna uma lista de todos os carrinhos, de todos os usuários.
      tags:
        - Carrinhos
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        404:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []
    post:
      summary: Cria um novo carrinho.
      tags:
        - Carrinhos
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        409:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        422:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

  /carrinhos/{id}:
    get:
      summary: Retorna o carrinho especificado pelo Id inserido.
      tags:
        - Carrinhos
      parameters:
        - in: path
          type: string
          name: id
      responses:
        200:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Cart"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Message"
    security:
      - JWTAuth: []
    put:
      summary: Atualiza o carrinho especificado pelo Id.
      tags:
        - Carrinhos
      parameters:
        - in: path
          type: string
          name: id
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        200:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Cart"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Message"
        422:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

    delete:
      summary: Deleta o carrinho especificado pelo Id.
      tags:
        - Carrinhos
      parameters:
        - in: path
          type: string
          name: id
      responses:
        200:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Cart"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        404:
          content:
            application/json:
              schemas:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

  /renovar:
    get:
      summary: Renova o JWT.
      tags:
        - Autenticação
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Token"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
      security:
        - JWTAuth: []

  /cadastrar:
    post:
      summary: Cria um novo usuário.
      tags:
        - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        409:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        422:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /login:
    post:
      summary: Realiza o login.
      tags:
        - Autenticação
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        400:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        401:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"

components:
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: header
      name: Authorization

  schemas:
    Product:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        desc:
          type: string
        image_URL:
          type: string
    Message:
      type: object
      properties:
        Message:
          type: string
    Token:
      type: object
      properties:
        Token:
          type: string
    User:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Cart:
      type: object
      properties:
        productList:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              price:
                type: number
              desc:
                type: string
              image_URL:
                type: string
              createdBy:
                type: string
